# For DHCPd 
input {
    file {        
        path => ["PATH_TO_LOG"]
        sincedb_path => "/usr/share/logstash/data/sincedb"
        start_position => "beginning"
    }
}

filter {
    if ("dhcpd" in [message]) {
                                        
        if ("DHCPDISCOVER" in [message]) {
            grok {
                match => {message => "%{SYSLOGTIMESTAMP:timestamp} %{IPORHOST:hostname} dhcpd%{DATA:TRASH}\: %{DATA:eventtype} from %{MAC:clientmac} (?: |\(%{DATA:clientdomain}\) )?via %{DATA:interfacename}(?:$|\: %{DATA:description}$)"}
                                                                            }
        } else if ("DHCPOFFER" in [message]) {
            grok {
                match => {message => "%{SYSLOGTIMESTAMP:timestamp} %{IPORHOST:hostname} dhcpd%{DATA:TRASH}\: %{DATA:eventtype} on %{IP:clientip} to %{MAC:clientmac} (?: |\(%{DATA:clientdomain}\) )?via %{DATA:interfacename}"}
                                            }
        } else if ("DHCPREQUEST" in [message]) {
            grok {
                match => {message => "%{SYSLOGTIMESTAMP:timestamp} %{IPORHOST:hostname} dhcpd%{DATA:TRASH}\: %{DATA:eventtype} for %{IP:clientip} (?: |\(%{IP:serverip}\) )?from %{MAC:clientmac} (?: |\(%{DATA:clientdomain}\) )?via %{DATA:interfacename}(?<description>|:.*)$"}
                                            }
        } else if ("DHCPACK" in [message]) {
            grok {
                match => {message => "%{SYSLOGTIMESTAMP:timestamp} %{IPORHOST:hostname} dhcpd%{DATA:TRASH}\: %{DATA:eventtype} on %{IP:clientip} to %{MAC:clientmac} (?: |\(%{DATA:clientdomain}\) )?via %{DATA:interfacename}"}
                                            }
        } else {
            grok {
                match => {message => "%{SYSLOGTIMESTAMP:timestamp} %{IPORHOST:hostname} dhcpd\: %{WORD:description}"}
            }
        }
        date {
            match => [ "timestamp", "MMM dd HH:mm:ss" , "MMM  d HH:mm:ss"]
            timezone => "Asia/Tokyo"
            tag_on_failure => ["_dateparsefailure"]
            target => "@timestamp"
            remove_field => ["timestamp"]
        }
        mutate {
            remove_field => "message"
            add_field => { "[data_stream][namespace]" => "ipam"}
            add_field => { "[data_stream][dataset]" => "dhcpd"}
        }
        mutate {
            rename => {
                "hostname" => "host.name"
                "eventtype" => "event.type"
                "clientip" => "client.ip"
                "clientmac" => "client.mac"
                "interfacename" => "interface.name"
                "serverip" => "server.ip"
            }
        }
        if ([client.ip] =~ /.+/) {mutate {add_field => {"related.ip" => "%{client.ip}"}}}
        if ([clientdomain] =~ /.+/) {
            mutate {
                rename => {"clientdomain" => "client.domain"}
                add_field => {"related.host" => "%{client.domain}"}
            }
        }
        } else {
        csv {
            source => "message"
            separator => " "
            autogenerate_column_names => true
        }
        mutate {
            add_field => { "[data_stream][namespace]" => "ipam"}
            add_field => { "[data_stream][dataset]" => "other"}
        }
    }
}

output {
    elasticsearch {
        hosts => ["https://elastic.local:9200"]
        user => "elastic"
        password => 'PASS'
        data_stream => true
        data_stream_type => "logs"           
    }
}
