# For Allied-Telessis AP
input {
    file {
        mode => "tail"
                path => ["PATH_TO_LOG_OF_AP"]
                start_position => "beginning"
        sincedb_path => "/usr/share/logstash/data/sincedb"
                    }
}

filter {
    if ("hostapd" in [message]){
        mutate{ add_field => { "[data_stream][namespace]" => "hostapd" } }
        if ("STA" in [message]){
            if ("disassociated" in [message]){
                                grok {
                    match => {message => "%{SYSLOGTIMESTAMP:timestamp} %{DATA:aphostname} hostapd\: %{DATA:interface}\: STA %{MAC:clientmac} %{WORD:eventtype} (?:with|from) BSSID %{MAC:bssid} \(%{DATA:ssid}\) reason %{NUMBER:reason}"  }
                    remove_field => "message"
                }
                mutate {
                    rename => {
                        "aphostname" => "host.name"
                        "interface" => "interface.name"
                        "clientmac" => "client.mac"
                        "eventtype" => "event.type"
                        "bssid" => "network.bssid"
                        "ssid" => "network.name"
                    }
                }
            } else if ("associated" in [message]){
                                                                grok {
                    match => {message => "%{SYSLOGTIMESTAMP:timestamp} %{DATA:aphostname} hostapd\: %{DATA:interface}\: STA %{MAC:clientmac} %{WORD:eventtype} (?:with|from) BSSID %{MAC:bssid} \(%{DATA:ssid}\) RSSI %{NUMBER:rssi}"  }
                    remove_field => "message"
                }
                mutate {
                    rename => {
                        "aphostname" => "host.name"
                        "interface" => "interface.name"
                        "clientmac" => "client.mac"
                        "eventtype" => "event.type"
                        "bssid" => "network.bssid"
                        "ssid" => "network.name"
                        "rssi" => "network.rssi"
                    }
                }
            } else {
                if ("IEEE 802.1X" in [message]){
                                                                                grok {
                        match => {message => "%{SYSLOGTIMESTAMP:timestamp} %{DATA:aphostname} hostapd\: %{DATA:interface}\: STA %{MAC:clientmac} IEEE 802.1X %{DATA:eventtype} \- identity \'%{DATA:userid}\' EAP type\: %{GREEDYDATA:trash} RADIUS server\: %{DATA:serverip}"  }
                        remove_field => ["message", "trash"]
                    }
                    mutate {
                        rename => {
                            "aphostname" => "host.name"
                            "interface" => "interface.name"
                            "clientmac" => "client.mac"
                            "eventtype" => "event.type"
                            "userid" => "user.id"
                            "serverip" => "server.ip"
                        }
                        add_field => { "[@metadata][tag]" => "user_activity" } 
                        add_field => { "[@metadata][log_source]" => "ap_allied" } 
                        add_field => { "[@metadata][log_type]" => "authentication" } 
                    }
                } else {
                                                                                grok {
                        match => {message => "%{SYSLOGTIMESTAMP:timestamp} %{DATA:aphostname} hostapd\: %{DATA:interface}\: STA %{MAC:clientmac} %{GREEDYDATA:description}$"}
                        remove_field => "message"
                    }
                    mutate {
                        rename => {
                            "aphostname" => "host.name"
                            "interface" => "interface.name"
                            "clientmac" => "client.mac"
                            "description" => "description"
                        }
                    }
                }
            }
                                                                                                                                                                    } else if ("uhttpd" in [message]){
        mutate{ add_field => { "[data_stream][namespace]" => "uhttpd" } }
                                grok {
            match => {message => "%{SYSLOGTIMESTAMP:timestamp} %{DATA:aphostname} uhttpd%{DATA:trash}\: %{GREEDYDATA:description}$"}
            remove_field => "message"
        }
        mutate {
            remove_field => "trash"
            rename => {
                "aphostname" => "host.name"
                "interface" => "interface.name"
                "description" => "description"
            }
        }
    } else if ("kernel" in [message]){
        mutate{ add_field => { "[data_stream][namespace]" => "kernel" } }
                                        grok {
            match => {message => "%{SYSLOGTIMESTAMP:timestamp} %{DATA:aphostname} %{WORD:processname}\: %{GREEDYDATA:description}$"}
            remove_field => "message"
        }
        mutate {
            remove_field => "trash"
            rename => {
                "aphostname" => "host.name"
                "processname" => "interface.name"
                "description" => "description"
            }
        }
    } else if ("at-beacon-checker" in [message]){
        mutate{ add_field => { "[data_stream][namespace]" => "at_beacon_checker" } }
        if ("at-beacon-checker.sh" in [message]){
                                    grok {
                match => {message => "%{SYSLOGTIMESTAMP:timestamp} %{IPORHOST:aphostname} at-beacon-checker.sh%{DATA:trash}\: %{WORD:description}$"}
                remove_field => "message"
            }
            mutate {
                remove_field => "trash"
                rename => {
                    "aphostname" => "host.name"
                    "description" => "description"
                }
            }
        } else {
                        grok {
                match => {message => "%{SYSLOGTIMESTAMP:timestamp} %{DATA:aphostname} at-beacon-checker.sh%{POSINT:trash}\: %{WORD:description}$"}
                remove_field => "message"
            }
            mutate {
                remove_field => "trash"
                rename => {
                    "aphostname" => "host.name"
                    "description" => "description"
                }
            }
        }
    } else if ("netifd" in [message]){
        mutate{ add_field => { "[data_stream][namespace]" => "netifd" } }
        if ("Network device" in [message] and "link is" in [message]){
                                    grok {
                match => {message => "%{SYSLOGTIMESTAMP:timestamp} %{DATA:aphostname} netifd\: Network device \'%{DATA:interface}\' link is %{WORD:eventtype}"}
                remove_field => "message"
            }
            mutate {
                remove_field => "trash"
                rename => {
                    "aphostname" => "host.name"
                    "interface" => "interface.name"
                    "eventtype" => "eventtype"
                }
            }
        } else {
                        grok {
                match => {message => "%{SYSLOGTIMESTAMP:timestamp} %{DATA:aphostname} netifd\: %{GREEDYDATA:description}$"}
                remove_field => "message"
            }
            mutate {
                remove_field => "trash"
                rename => {
                    "aphostname" => "host.name"
                }
            }
        }
    }

    date {
        match => [ "timestamp", "MMM dd HH:mm:ss", "MMM  d HH:mm:ss" ]
        timezone => "Asia/Tokyo"
        tag_on_failure => ["_dateparsefailure"]
        target => "@timestamp"
        remove_field => ["timestamp"]
    }
    if ([source.ip] =~ /.+/) {
        mutate {add_field => {"client.ip" => "%{source.ip}" }}
        mutate {add_field => {"related.ip" => "%{source.ip}"}}
    }
    if ([destination.ip] =~ /^[0-9].+/) {
        mutate {add_field => {"server.ip" => "%{destination.ip}"}}
        mutate {add_field => {"related.ip" => "%{destination.ip}"}}
    } else {
        mutate {remove_field => "destination.ip"}
    }
}
}
output {
        elasticsearch {
            hosts => ["https://elastic.local:9200"]
            user => "elastic"
            password => 'PASS'
            data_stream => true
            data_stream_type => "logs"
            data_stream_dataset => "ap_allied"
            }
}
