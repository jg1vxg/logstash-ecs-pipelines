# For Squid

input {
    file {
        mode => "read"
        path => ["PATH_TO_LOG"]
        start_position => "beginning"
        sincedb_path => "/usr/share/logstash/data/sincedb"
    }
}

filter {
    grok {
        match => { "message" => "%{IP:sourceip} %{HTTPDUSER:ident} %{USER:auth} \[%{HTTPDATE:timestamp}\] \"%{WORD:httprequestmethod} %{NOTSPACE:urloriginal} HTTP/%{NUMBER:httpversion}\" %{NUMBER:httpresponsestatuscode:int} %{NUMBER:httpresponsebodybytes:int} \"%{DATA:httprequestreferrer}\" \"%{DATA:useragentoriginal}\" %{WORD:networkprotocol}(:)%{WORD:networkdirection} %{DATA:destinationip} %{NUMBER:eventcreated} %{NUMBER:eventduration}" }
        remove_field => "message"
    }
    mutate {
        remove_field => ["ident", "auth"]
        convert => {"eventcreated" => "integer"}
    }
    date {
        match => [ "timestamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
        target => "@timestamp"
    }
    date {
        match => ["eventcreated", "UNIX"]
        target => "event.created"
        remove_field => "eventcreated"
    }
    useragent {
        source => "useragentoriginal"
        target => "user_agent"
    }
    mutate {
        rename => {
            "sourceip" => "source.ip"
            "httprequestmethod" => "http.request.method"
            "urloriginal" => "url.original"
            "httpversion" => "http.version"
            "httpresponsestatuscode" => "http_response.status_code"
            "httpresponsebodybytes" => "http.response.body.bytes"
            "httprequestreferrer" => "http.request.referrer"
            "useragentoriginal" => "user_agent.original"
            "networkprotocol" => "network.protocol"
            "networkdirection" => "network.direction"
            "destinationip" => "destination.ip"
            "eventduration" => "event.duration"
        }
    }
    if ([source.ip] =~ /.+/) {
        mutate {add_field => {"client.ip" => "%{source.ip}" }}
        mutate {add_field => {"related.ip" => "%{source.ip}"}}
    }
    if ([destination.ip] =~ /^[0-9].+/) {
        mutate {add_field => {"server.ip" => "%{destination.ip}"}}
        mutate {add_field => {"related.ip" => "%{destination.ip}"}}
    } else {
        mutate {remove_field => "destination.ip"}
    }
    
    grok {
        match => {
            
            "[url][original]" => ["(^(http\://|)%{DATA:extractedfqdn}[$/\:]|^%{DATA:extractedfqdn}$)"]
        }
    }
    mutate {
    
        add_field => { "related.host" => "%{extractedfqdn}"}
        remove_field => ["extractedfqdn"]
    }
}
output {
    elasticsearch {
        hosts => ["https://elastic.local:9200"]
        user => "elastic"
        password => 'PASS'
        
        data_stream => true
        data_stream_type => "logs"
        data_stream_dataset => "proxy"
        data_stream_namespace => "access"
    }
}
